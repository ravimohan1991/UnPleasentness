/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (push,OBJECT_ALIGNMENT)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Spawned)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(KillCredit)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(InterpolateEnd)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(FootZoneChange)
AUTOGENERATE_NAME(HeadZoneChange)
AUTOGENERATE_NAME(PainTimer)
AUTOGENERATE_NAME(SpeechTimer)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(Expired)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(BotDesireability)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(Possess)
AUTOGENERATE_NAME(UnPossess)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(WalkTexture)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(AlterDestination)
AUTOGENERATE_NAME(SpawnNotification)
AUTOGENERATE_NAME(UpdateTactics)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(CheckClientError)
AUTOGENERATE_NAME(PlayerCalcViewEx)

#ifndef NAMES_ONLY

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_MouseButton4         =21,
    IK_MouseButton5         =22,
    IK_MouseButton6         =23,
    IK_MouseButton7         =24,
    IK_MouseButton8         =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyPovUp             =240,
    IK_JoyPovDown           =241,
    IK_JoyPovLeft           =242,
    IK_JoyPovRight          =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum EDodgeDir
{
    DODGE_None              =0,
    DODGE_Left              =1,
    DODGE_Right             =2,
    DODGE_Forward           =3,
    DODGE_Back              =4,
    DODGE_Active            =5,
    DODGE_Done              =6,
    DODGE_MAX               =7,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_MAX                  =20,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_MAX                  =10,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_MAX                 =5,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_MAX                  =8,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Rolling            =7,
    PHYS_Interpolating      =8,
    PHYS_MovingBrush        =9,
    PHYS_Spider             =10,
    PHYS_Trailer            =11,
    PHYS_MAX                =12,
};

struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventBroadcastMessage_Parms
{
    FString Msg;
    BITFIELD bBeep;
    FName Type;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderOverlays_Parms
{
    class UCanvas* Canvas;
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    FName DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventInterpolateEnd_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventKillCredit_Parms
{
    class AActor* Other;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventExpired_Parms
{
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventSpawned_Parms
{
};
struct AActor_eventAnimEnd_Parms
{
};
class ENGINE_API AActor : public UObject
{
public:
    BITFIELD bStatic:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bAnimFinished:1;
    BITFIELD bAnimLoop:1;
    BITFIELD bAnimNotify:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bAssimilated:1;
    BITFIELD bTicked:1;
    BITFIELD bLightChanged:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bIsMover:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bHighDetail:1;
    BITFIELD bStasis:1;
    BITFIELD bForceStasis:1;
    BITFIELD bIsPawn:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bNetOptional:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bClientAnim:1;
    BITFIELD bSimFall:1;
    BYTE Physics GCC_PACK(INT_ALIGNMENT);
    BYTE Role;
    BYTE RemoteRole;
    INT NetTag;
    class AActor* Owner;
    FName InitialState;
    FName Group;
    FLOAT TimerRate;
    FLOAT TimerCounter;
    FLOAT LifeSpan;
    FName AnimSequence;
    FLOAT AnimFrame;
    FLOAT AnimRate;
    FLOAT TweenRate;
    class UAnimation* SkelAnim;
    FLOAT LODBias;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FName Tag;
    FName Event;
    class AActor* Target;
    class APawn* Instigator;
    class USound* AmbientSound;
    class AInventory* Inventory;
    class AActor* Base;
    FPointRegion Region;
    FName AttachTag;
    BYTE StandingCount;
    BYTE MiscNumber;
    BYTE LatentByte;
    BYTE TransientSoundPriority;
    INT LatentInt;
    FLOAT LatentFloat;
    class AActor* LatentActor;
    TArrayNoInit<class AActor*> Touching;
    INT Unused;
    class AActor* Deleted;
    INT CollisionTag;
    INT LightingTag;
    INT OtherTag;
    INT ExtraTag;
    INT SpecialTag;
    FVector Location;
    FRotator Rotation;
    FVector OldLocation;
    FVector ColLocation;
    FVector Velocity;
    FVector Acceleration;
    FLOAT OddsOfAppearing;
    BITFIELD bHiddenEd:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bMemorized:1;
    BITFIELD bHighlighted:1;
    BITFIELD bEdLocked:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bDifficulty0:1;
    BITFIELD bDifficulty1:1;
    BITFIELD bDifficulty2:1;
    BITFIELD bDifficulty3:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bNet:1;
    BITFIELD bNetSpecial:1;
    BITFIELD bScriptInitialized:1;
    class AActor* HitActor;
    BYTE DrawType;
    BYTE Style;
    class UTexture* Sprite;
    class UTexture* Texture;
    class UTexture* Skin;
    class UMesh* Mesh;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector PrePivot;
    FLOAT ScaleGlow;
    FLOAT VisibilityRadius;
    FLOAT VisibilityHeight;
    BYTE AmbientGlow;
    BYTE Fatness;
    FLOAT SpriteProjForward;
    BITFIELD bUnlit:1;
    BITFIELD bNoSmooth:1;
    BITFIELD bParticles:1;
    BITFIELD bRandomFrame:1;
    BITFIELD bMeshEnviroMap:1;
    BITFIELD bMeshCurvy:1;
    BITFIELD bFilterByVolume:1;
    BITFIELD bShadowCast:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCarriedItem:1;
    BITFIELD bForcePhysicsUpdate:1;
    BITFIELD bIsSecretGoal:1;
    BITFIELD bIsKillGoal:1;
    BITFIELD bIsItemGoal:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    class UTexture* MultiSkins[8];
    BYTE SoundRadius;
    BYTE SoundVolume;
    BYTE SoundPitch;
    BYTE SoundPriority;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BYTE LightType GCC_PACK(INT_ALIGNMENT);
    BYTE LightEffect;
    BYTE LightBrightness;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightRadius;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE VolumeBrightness;
    BYTE VolumeRadius;
    BYTE VolumeFog;
    BITFIELD bSpecialLit:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLensFlare:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BYTE DodgeDir GCC_PACK(INT_ALIGNMENT);
    FLOAT Mass;
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class AActor* PendingTouch;
    FLOAT AnimLast;
    FLOAT AnimMinRate;
    FLOAT OldAnimRate;
    FPlane SimAnim;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    BITFIELD bNetInitial:1;
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bNetSee:1;
    BITFIELD bNetHear:1;
    BITFIELD bNetFeel:1;
    BITFIELD bSimulatedPawn:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bNetViewingOwner:1;
    class UClass* RenderIteratorClass;
    class URenderIterator* RenderInterface;
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execIsInPackageMap);
    DECLARE_FUNCTION(execAddToPackageMap);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execMoveCacheEntry);
    DECLARE_FUNCTION(execGetCacheEntry);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execLinkSkelAnim);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execGetAnimGroup);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventRenderTexture(class UScriptedTexture* Tex)
    {
        AActor_eventRenderTexture_Parms Parms;
        Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    void eventBroadcastLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventBroadcastMessage(const FString& Msg, BITFIELD bBeep, FName Type)
    {
        AActor_eventBroadcastMessage_Parms Parms;
        Parms.Msg=Msg;
        Parms.bBeep=((bBeep) ? FIRST_BITFIELD : 0);
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    void eventRenderOverlays(class UCanvas* Canvas)
    {
        AActor_eventRenderOverlays_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays),&Parms);
    }
    void eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.InTeleporter=InTeleporter;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=((bNoOverride) ? FIRST_BITFIELD : 0);
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, FName DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    void eventEndedRotation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
    }
    void eventInterpolateEnd(class AActor* Other)
    {
        AActor_eventInterpolateEnd_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateEnd),&Parms);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        return Parms.ReturnValue;
    }
    void eventKillCredit(class AActor* Other)
    {
        AActor_eventKillCredit_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_KillCredit),&Parms);
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
    }
    void eventBaseChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
    }
    void eventFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
    }
    void eventTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
    }
    void eventExpired()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Expired),NULL);
    }
    void eventDestroyed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
    }
    void eventSpawned()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Spawned),NULL);
    }
    void eventAnimEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),NULL);
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    #include "AActor.h"
};

enum EIntelligence
{
    BRAINS_NONE             =0,
    BRAINS_REPTILE          =1,
    BRAINS_MAMMAL           =2,
    BRAINS_HUMAN            =3,
    BRAINS_MAX              =4,
};
enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};

struct APawn_eventPainTimer_Parms
{
};
struct APawn_eventSpeechTimer_Parms
{
};
struct APawn_eventHeadZoneChange_Parms
{
    class AZoneInfo* newHeadZone;
};
struct APawn_eventFootZoneChange_Parms
{
    class AZoneInfo* newFootZone;
};
struct APawn_eventWalkTexture_Parms
{
    class UTexture* Texture;
    FVector StepLocation;
    FVector StepNormal;
};
struct APawn_eventEnemyNotVisible_Parms
{
};
struct APawn_eventUpdateTactics_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventSeePlayer_Parms
{
    class AActor* Seen;
};
struct APawn_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct APawn_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
};
struct APawn_eventLongFall_Parms
{
};
struct APawn_eventPlayerTimeout_Parms
{
};
struct APawn_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APawn_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventAlterDestination_Parms
{
};
struct APawn_eventMayFall_Parms
{
};
class ENGINE_API APawn : public AActor
{
public:
    BITFIELD bBehindView:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bIsPlayer:1;
    BITFIELD bJustLanded:1;
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bHitSlopedWall:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bWarping:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bFixedStart:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bDrowning:1;
    BITFIELD bLOSflag:1;
    BITFIELD bFromWall:1;
    BITFIELD bHunting:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bJumpOffPawn:1;
    BITFIELD bShootSpecial:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bIsHuman:1;
    BITFIELD bIsFemale:1;
    BITFIELD bIsMultiSkinned:1;
    BITFIELD bCountJumps:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bViewTarget:1;
    BITFIELD bPawnLink:1;
    FLOAT SightCounter;
    FLOAT PainTime;
    FLOAT SpeechTime;
    FLOAT AvgPhysicsTime;
    FPointRegion FootRegion;
    FPointRegion HeadRegion;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    class AActor* FaceTarget;
    FVector Destination;
    FVector Focus;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FLOAT MeleeRange;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT MaxStepHeight;
    FLOAT AirControl;
    FLOAT MinHitWall;
    BYTE Visibility;
    FLOAT Alertness;
    FLOAT Stimulus;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT HearingThreshold;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    class APawn* Enemy;
    class AWeapon* Weapon;
    class AWeapon* PendingWeapon;
    class AInventory* SelectedItem;
    FRotator ViewRotation;
    FVector WalkBob;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT OrthoZoom;
    FLOAT FovAngle;
    INT DieCount;
    INT ItemCount;
    INT KillCount;
    INT SecretCount;
    INT Spree;
    INT Health;
    FStringNoInit SelectionMesh;
    FStringNoInit SpecialMesh;
    FName ReducedDamageType;
    FLOAT ReducedDamagePct;
    class UClass* DropWhenKilled;
    FLOAT UnderWaterTime;
    BYTE AttitudeToPlayer;
    BYTE Intelligence;
    FLOAT Skill;
    class AActor* SpecialGoal;
    FLOAT SpecialPause;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    class APawn* nextPawn;
    class USound* HitSound1;
    class USound* HitSound2;
    class USound* Land;
    class USound* Die;
    class USound* WaterStep;
    BYTE bZoom;
    BYTE bRun;
    BYTE bLook;
    BYTE bDuck;
    BYTE bSnapLevel;
    BYTE bStrafe;
    BYTE bFire;
    BYTE bAltFire;
    BYTE bFreeLook;
    BYTE bExtra0;
    BYTE bExtra1;
    BYTE bExtra2;
    BYTE bExtra3;
    FLOAT CombatStyle;
    class ANavigationPoint* home;
    FName NextState;
    FName NextLabel;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FName AlarmTag;
    FName SharedAlarmTag;
    class ADecoration* carriedDecoration;
    FName PlayerReStartState;
    FStringNoInit MenuName;
    FStringNoInit NameArticle;
    BYTE VoicePitch;
    FStringNoInit VoiceType;
    FLOAT OldMessageTime;
    class ANavigationPoint* RouteCache[16];
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ADecal* Shadow;
    DECLARE_FUNCTION(execClientHearSound);
    DECLARE_FUNCTION(execCheckValidSkinPackage);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemovePawn);
    DECLARE_FUNCTION(execAddPawn);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execClearPaths);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execTurnToward);
    DECLARE_FUNCTION(execTurnTo);
    DECLARE_FUNCTION(execStrafeFacing);
    DECLARE_FUNCTION(execStrafeTo);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    void eventPainTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PainTimer),NULL);
    }
    void eventSpeechTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SpeechTimer),NULL);
    }
    void eventHeadZoneChange(class AZoneInfo* newHeadZone)
    {
        APawn_eventHeadZoneChange_Parms Parms;
        Parms.newHeadZone=newHeadZone;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadZoneChange),&Parms);
    }
    void eventFootZoneChange(class AZoneInfo* newFootZone)
    {
        APawn_eventFootZoneChange_Parms Parms;
        Parms.newFootZone=newFootZone;
        ProcessEvent(FindFunctionChecked(ENGINE_FootZoneChange),&Parms);
    }
    void eventWalkTexture(class UTexture* Texture, FVector StepLocation, FVector StepNormal)
    {
        APawn_eventWalkTexture_Parms Parms;
        Parms.Texture=Texture;
        Parms.StepLocation=StepLocation;
        Parms.StepNormal=StepNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_WalkTexture),&Parms);
    }
    void eventEnemyNotVisible()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
    }
    void eventUpdateTactics(FLOAT DeltaTime)
    {
        APawn_eventUpdateTactics_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTactics),&Parms);
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
    }
    void eventSeePlayer(class AActor* Seen)
    {
        APawn_eventSeePlayer_Parms Parms;
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        APawn_eventHearNoise_Parms Parms;
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
    }
    void eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters)
    {
        APawn_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventPlayerTimeout()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTimeout),NULL);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APawn_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=((bBeep) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=((bBeep) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventAlterDestination()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AlterDestination),NULL);
    }
    void eventMayFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
    }
    DECLARE_CLASS(APawn,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APawn.h"
};

#define UCONST_SmoothAdjustLocationTime 0.35f

struct APlayerPawn_eventPlayerCalcViewEx_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
    FVector CameraVelocity;
};
struct APlayerPawn_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerPawn_eventPlayerTick_Parms
{
    FLOAT Time;
};
struct APlayerPawn_eventUnPossess_Parms
{
};
struct APlayerPawn_eventPossess_Parms
{
};
struct APlayerPawn_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventShowUpgradeMenu_Parms
{
};
struct APlayerPawn_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventCheckClientError_Parms
{
};
struct APlayerPawn_eventPreClientTravel_Parms
{
};
struct APlayerPawn_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerPawn : public APawn
{
public:
    class UPlayer* Player;
    FStringNoInit Password;
    FLOAT DodgeClickTimer;
    FLOAT DodgeClickTime;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    INT ShowFlags;
    INT RendMap;
    INT Misc1;
    INT Misc2;
    class AActor* ViewTarget;
    FVector FlashScale;
    FVector FlashFog;
    class AHUD* myHUD;
    class AScoreBoard* Scoring;
    class UClass* HUDType;
    class UClass* ScoringType;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    BYTE Transition;
    FLOAT shaketimer;
    INT shakemag;
    FLOAT shakevert;
    FLOAT maxshake;
    FLOAT verttimer;
    class UClass* CarcassType;
    FLOAT MyAutoAim;
    FLOAT Handedness;
    class USound* JumpSound;
    BITFIELD bAdmin:1;
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bIsCrouching:1;
    BITFIELD bShakeDir:1;
    BITFIELD bAnimTransition:1;
    BITFIELD bIsTurning:1;
    BITFIELD bFrozen:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bInvertMouse:1;
    BITFIELD bShowScores:1;
    BITFIELD bShowMenu:1;
    BITFIELD bSpecialMenu:1;
    BITFIELD bWokeUp:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bDelayedCommand:1;
    BITFIELD bRising:1;
    BITFIELD bReducedVis:1;
    BITFIELD bCenterView:1;
    BITFIELD bMaxMouseSmoothing:1;
    BITFIELD bMouseZeroed:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bNoFlash:1;
    BITFIELD bNoVoices:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bZooming:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bJustFired:1;
    BITFIELD bJustAltFired:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bNeverAutoSwitch:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bCheatsEnabled:1;
    BITFIELD bNoMouseSmoothing:1;
    FLOAT ZoomLevel;
    class UClass* SpecialMenu;
    FStringNoInit DelayedCommand;
    FLOAT MouseSensitivity;
    FName WeaponPriority[50];
    FLOAT SmoothMouseX;
    FLOAT SmoothMouseY;
    FLOAT BorrowedMouseX;
    FLOAT BorrowedMouseY;
    FLOAT MouseSmoothThreshold;
    FLOAT MouseZeroTime;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aExtra4;
    FLOAT aExtra3;
    FLOAT aExtra2;
    FLOAT aExtra1;
    FLOAT aExtra0;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FStringNoInit ProgressMessage[8];
    FColor ProgressColor[8];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit FailedView;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ngWorldSecret;
    BITFIELD ngSecretSet:1;
    BITFIELD ReceivedSecretChecksum:1;
    FRotator TargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    INT DemoViewPitch;
    INT DemoViewYaw;
    FLOAT LastPlaySound;
    FLOAT LastMessageWindow;
    INT LoginAttempts;
    BITFIELD bLoginDisabled:1;
    FLOAT NextLoginTime;
    FLOAT ViewDelay;
    FLOAT TauntDelay;
    FLOAT SpeechDelay;
    FLOAT LastView;
    FLOAT LastTaunt;
    FLOAT LastSpeech;
    BITFIELD bCyclingView:1;
    FLOAT MinFOV;
    FLOAT MaxFOV;
    INT MaxNameChanges;
    INT NameChanges;
    BITFIELD bDisableMovementBuffering:1;
    BITFIELD bPausePressed:1;
    INT ServerMovementVersion;
    INT ClientMovementVersion;
    FLOAT AccumulatedHTurn;
    FLOAT AccumulatedVTurn;
    FVector PreAdjustLocation;
    FVector AdjustLocationOffset;
    FLOAT AdjustLocationAlpha;
    FLOAT LastClientTimestamp;
    FVector LastClientLocation;
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execClientTravel);
    void eventPlayerCalcViewEx(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation, FVector& CameraVelocity)
    {
        APlayerPawn_eventPlayerCalcViewEx_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        Parms.CameraVelocity=CameraVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcViewEx),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
        CameraVelocity=Parms.CameraVelocity;
    }
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerPawn_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventPlayerTick(FLOAT Time)
    {
        APlayerPawn_eventPlayerTick_Parms Parms;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
    }
    void eventUnPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPossess),NULL);
    }
    void eventPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Possess),NULL);
    }
    void eventPlayerInput(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    void eventCheckClientError()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_CheckClientError),NULL);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=((bItems) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerPawn,APawn,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APlayerPawn.h"
};


class ENGINE_API ACamera : public APlayerPawn
{
public:
    DECLARE_CLASS(ACamera,APlayerPawn,0|CLASS_Config,Engine)
    #include "ACamera.h"
};


class ENGINE_API AScout : public APawn
{
public:
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};


struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    FName ownerTeam;
    BITFIELD taken:1;
    INT upstreamPaths[16];
    INT Paths[16];
    INT PrunedPaths[16];
    class ANavigationPoint* VisNoReachPaths[16];
    INT visitedWeight;
    class AActor* RouteCache;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* startPath;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    BITFIELD bPlayerOnly:1;
    BITFIELD bEndPoint:1;
    BITFIELD bEndPointOnly:1;
    BITFIELD bSpecialCost:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bTwoWay:1;
    DECLARE_FUNCTION(execdescribeSpec);
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.Seeker=Seeker;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    #include "ANavigationPoint.h"
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    FLOAT MaxZDiffAdd;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AButtonMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(AButtonMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AButtonMarker)
};


class ENGINE_API ATriggerMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(ATriggerMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggerMarker)
};


class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
    class AInventory* markedItem;
    DECLARE_CLASS(AInventorySpot,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventorySpot)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber GCC_PACK(INT_ALIGNMENT);
    BITFIELD bSinglePlayerStart:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1;
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper GCC_PACK(INT_ALIGNMENT);
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1;
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    #include "ABrush.h"
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

class ENGINE_API AMover : public ABrush
{
public:
    BYTE MoverEncroachType GCC_PACK(INT_ALIGNMENT);
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    FName PlayerBumpEvent;
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    FVector KeyPos[8];
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator oldRot;
    FRotator SavedRot;
    class ANavigationPoint* myMarker;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class APawn* WaitingPawn;
    BITFIELD bOpening:1;
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bPlayerOnly:1;
    class ATrigger* RecommendedTrigger;
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    DECLARE_CLASS(AMover,ABrush,0|CLASS_NativeReplication,Engine)
    #include "AMover.h"
};


struct AInventory_eventBotDesireability_Parms
{
    class APawn* Bot;
    FLOAT ReturnValue;
};
class ENGINE_API AInventory : public AActor
{
public:
    BYTE AutoSwitchPriority GCC_PACK(INT_ALIGNMENT);
    BYTE InventoryGroup;
    BITFIELD bActivatable:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bDisplayableInv:1;
    BITFIELD bActive:1;
    BITFIELD bSleepTouch:1;
    BITFIELD bHeldItem:1;
    BITFIELD bTossedOut:1;
    BITFIELD bCalcDrawOffsetFOV:1;
    BITFIELD bAmbientGlow:1;
    BITFIELD bInstantRespawn:1;
    BITFIELD bRotatingPickup:1;
    FStringNoInit PickupMessage;
    FStringNoInit ItemName;
    FStringNoInit ItemArticle;
    FLOAT RespawnTime;
    FName PlayerLastTouched;
    FVector PlayerViewOffset;
    class UMesh* PlayerViewMesh;
    FLOAT PlayerViewScale;
    FLOAT BobDamping;
    class UMesh* PickupViewMesh;
    FLOAT PickupViewScale;
    class UMesh* ThirdPersonMesh;
    FLOAT ThirdPersonScale;
    class UTexture* StatusIcon;
    FName ProtectionType1;
    FName ProtectionType2;
    INT Charge;
    INT ArmorAbsorption;
    BITFIELD bIsAnArmor:1;
    INT AbsorptionPriority;
    class AInventory* NextArmor;
    FLOAT MaxDesireability;
    class AInventorySpot* myMarker;
    BITFIELD bSteadyFlash3rd:1;
    BITFIELD bFirstFrame:1;
    BITFIELD bMuzzleFlashParticles:1;
    BITFIELD bToggleSteadyFlash:1;
    BITFIELD bSteadyToggle:1;
    BYTE FlashCount GCC_PACK(INT_ALIGNMENT);
    BYTE OldFlashCount;
    BYTE MuzzleFlashStyle;
    class UMesh* MuzzleFlashMesh;
    FLOAT MuzzleFlashScale;
    class UTexture* MuzzleFlashTexture;
    class USound* PickupSound;
    class USound* ActivateSound;
    class USound* DeActivateSound;
    class USound* RespawnSound;
    class UTexture* Icon;
    FStringNoInit M_Activated;
    FStringNoInit M_Selected;
    FStringNoInit M_Deactivated;
    class UClass* PickupMessageClass;
    class UClass* ItemMessageClass;
    FLOAT eventBotDesireability(class APawn* Bot)
    {
        AInventory_eventBotDesireability_Parms Parms;
        Parms.Bot=Bot;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_BotDesireability),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInventory,AActor,0|CLASS_NativeReplication,Engine)
    #include "AInventory.h"
};


class ENGINE_API APickup : public AInventory
{
public:
    class AInventory* Inv;
    INT NumCopies;
    BITFIELD bCanHaveMultipleCopies:1;
    BITFIELD bCanActivate:1;
    FStringNoInit ExpireMessage;
    BITFIELD bAutoActivate:1;
    DECLARE_CLASS(APickup,AInventory,0|CLASS_NativeReplication,Engine)
    #include "APickup.h"
};


class ENGINE_API AAmmo : public APickup
{
public:
    INT AmmoAmount;
    INT MaxAmmo;
    class UClass* ParentAmmo;
    BYTE UsedInWeaponSlot[10];
    class AAmmo* PAmmo;
    DECLARE_CLASS(AAmmo,APickup,0|CLASS_NativeReplication,Engine)
    #include "AAmmo.h"
};


class ENGINE_API AWeapon : public AInventory
{
public:
    FLOAT MaxTargetRange;
    class UClass* AmmoName;
    BYTE ReloadCount;
    INT PickupAmmoCount;
    class AAmmo* AmmoType;
    BITFIELD bPointing:1;
    BITFIELD bInstantHit:1;
    BITFIELD bAltInstantHit:1;
    BITFIELD bWarnTarget:1;
    BITFIELD bAltWarnTarget:1;
    BITFIELD bWeaponUp:1;
    BITFIELD bChangeWeapon:1;
    BITFIELD bLockedOn:1;
    BITFIELD bSplashDamage:1;
    BITFIELD bCanThrow:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bRecommendAltSplashDamage:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bOwnsCrosshair:1;
    BITFIELD bHideWeapon:1;
    BITFIELD bMeleeWeapon:1;
    BITFIELD bRapidFire:1;
    BITFIELD bSpecialIcon:1;
    FLOAT FiringSpeed;
    FVector FireOffset;
    class UClass* ProjectileClass;
    class UClass* AltProjectileClass;
    FName MyDamageType;
    FName AltDamageType;
    FLOAT ProjectileSpeed;
    FLOAT AltProjectileSpeed;
    FLOAT aimerror;
    FLOAT shakemag;
    FLOAT shaketime;
    FLOAT shakevert;
    FLOAT AIRating;
    FLOAT RefireRate;
    FLOAT AltRefireRate;
    class USound* FireSound;
    class USound* AltFireSound;
    class USound* CockingSound;
    class USound* SelectSound;
    class USound* Misc1Sound;
    class USound* Misc2Sound;
    class USound* Misc3Sound;
    FStringNoInit MessageNoAmmo;
    FStringNoInit DeathMessage;
    FColor NameColor;
    FRotator AdjustedAim;
    BITFIELD bSetFlashTime:1;
    BITFIELD bDrawMuzzleFlash:1;
    BYTE bMuzzleFlash GCC_PACK(INT_ALIGNMENT);
    FLOAT FlashTime;
    FLOAT MuzzleScale;
    FLOAT FlashY;
    FLOAT FlashO;
    FLOAT FlashC;
    FLOAT FlashLength;
    INT FlashS;
    class UTexture* MFTexture;
    class UTexture* MuzzleFlare;
    FLOAT FlareOffset;
    DECLARE_CLASS(AWeapon,AInventory,0|CLASS_NativeReplication,Engine)
    #include "AWeapon.h"
};


struct ASpawnNotify_eventSpawnNotification_Parms
{
    class AActor* A;
    class AActor* ReturnValue;
};
class ENGINE_API ASpawnNotify : public AActor
{
public:
    class UClass* ActorClass;
    class ASpawnNotify* Next;
    class AActor* eventSpawnNotification(class AActor* A)
    {
        ASpawnNotify_eventSpawnNotification_Parms Parms;
        Parms.A=A;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnNotification),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ASpawnNotify,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASpawnNotify)
};


struct ADecal_eventUpdate_Parms
{
    class AActor* L;
};
class ENGINE_API ADecal : public AActor
{
public:
    INT MultiDecalLevel;
    FLOAT LastRenderedTime;
    TArrayNoInit<INT> SurfList;
    DECLARE_FUNCTION(execDetachDecal);
    DECLARE_FUNCTION(execAttachDecal);
    void eventUpdate(class AActor* L)
    {
        ADecal_eventUpdate_Parms Parms;
        Parms.L=L;
        ProcessEvent(FindFunctionChecked(ENGINE_Update),&Parms);
    }
    DECLARE_CLASS(ADecal,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecal)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API Alocationid : public AKeypoint
{
public:
    FStringNoInit LocationName;
    FLOAT Radius;
    class Alocationid* NextLocation;
    DECLARE_CLASS(Alocationid,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(Alocationid)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    INT Position;
    FLOAT RateModifier;
    FLOAT GameSpeedModifier;
    FLOAT FovModifier;
    BITFIELD bEndOfPath:1;
    BITFIELD bSkipNextPath:1;
    FLOAT ScreenFlashScale;
    FVector ScreenFlashFog;
    class AInterpolationPoint* Prev;
    class AInterpolationPoint* Next;
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};


class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1;
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bStopCountDown:1;
    INT RemainingTime;
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT NumPlayers;
    INT SumFrags;
    FLOAT UpdateTimer;
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT Region;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    FStringNoInit GameEndedComments;
    class APlayerReplicationInfo* PRIArray[32];
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "AGameReplicationInfo.h"
};


class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit PlayerName;
    FStringNoInit OldName;
    INT PlayerID;
    FStringNoInit TeamName;
    BYTE Team;
    INT TeamID;
    FLOAT Score;
    FLOAT Deaths;
    class UClass* VoiceType;
    class ADecoration* HasFlag;
    INT Ping;
    BYTE PacketLoss;
    BITFIELD bIsFemale:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bIsABot:1;
    BITFIELD bFeigningDeath:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bAdmin:1;
    class UTexture* TalkTexture;
    class AZoneInfo* PlayerZone;
    class Alocationid* PlayerLocation;
    INT StartTime;
    INT TimeAcc;
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    #include "APlayerReplicationInfo.h"
};


struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    void* Context;
    BITFIELD bWorld:1;
    FLOAT TimeStamp;
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    FStringNoInit LocalBatcherURL;
    FStringNoInit LocalBatcherParams;
    FStringNoInit LocalStatsURL;
    FStringNoInit WorldBatcherURL;
    FStringNoInit WorldBatcherParams;
    FStringNoInit WorldStatsURL;
    FStringNoInit LocalLogDir;
    FStringNoInit WorldLogDir;
    BITFIELD bLogTypingEvents:1;
    BITFIELD bWorldBatcherError:1;
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    DECLARE_CLASS(AStatLog,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};

enum EFileEncoding
{
    FILE_ENCODING_ANSI      =0,
    FILE_ENCODING_UTF16LE   =1,
    FILE_ENCODING_UTF16LE_BOM=2,
    FILE_ENCODING_UTF8      =3,
    FILE_ENCODING_UTF8_BOM  =4,
    FILE_MAX                =5,
};

class ENGINE_API AStatLogFile : public AStatLog
{
public:
    BYTE Encoding GCC_PACK(INT_ALIGNMENT);
    BITFIELD bWatermark:1 GCC_PACK(INT_ALIGNMENT);
    void* LogAr;
    FStringNoInit StatLogFile;
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    #include "AInternetInfo.h"
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BYTE MergeCount;
    BITFIELD bRun:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bFire:1;
    BITFIELD bAltFire:1;
    BITFIELD bForceFire:1;
    BITFIELD bForceAltFire:1;
    BYTE DodgeMove GCC_PACK(INT_ALIGNMENT);
    FVector SavedLocation;
    FVector SavedVelocity;
    FRotator SavedViewRotation;
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    FName ZoneTag;
    FVector ZoneGravity;
    FVector ZoneVelocity;
    FLOAT ZoneGroundFriction;
    FLOAT ZoneFluidFriction;
    FLOAT ZoneTerminalVelocity;
    FName ZonePlayerEvent;
    INT ZonePlayerCount;
    INT NumCarcasses;
    INT DamagePerSec;
    FName DamageType;
    FStringNoInit DamageString;
    FStringNoInit ZoneName;
    class Alocationid* locationid;
    INT MaxCarcasses;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    class ASkyZoneInfo* SkyZone;
    BITFIELD bWaterZone:1;
    BITFIELD bFogZone:1;
    BITFIELD bKillZone:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bGravityZone:1;
    BITFIELD bPainZone:1;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BYTE AmbientBrightness GCC_PACK(INT_ALIGNMENT);
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor FogColor;
    FLOAT FogDistance;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bReverbZone:1;
    BITFIELD bRaytraceReverb:1;
    FLOAT SpeedOfSound;
    BYTE MasterGain;
    INT CutoffHz;
    BYTE Delay[6];
    BYTE Gain[6];
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BYTE MinLightCount;
    BYTE MaxLightCount;
    INT MinLightingPolyCount;
    INT MaxLightingPolyCount;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0|CLASS_NativeReplication,Engine)
    #include "AZoneInfo.h"
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1;
    INT iWarpZone;
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    FStringNoInit Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    BITFIELD bLonePlayer:1;
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bLowRes:1;
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    FLOAT PlayerDoppler;
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    INT HubStackLevel;
    BYTE LevelAction;
    BITFIELD bNeverPrecache:1 GCC_PACK(INT_ALIGNMENT);
    BYTE NetMode GCC_PACK(INT_ALIGNMENT);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    INT ServerMoveVersion;
    FStringNoInit EngineRevision;
    FStringNoInit EngineArchitecture;
    class UClass* DefaultGameType;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1;
    FLOAT NextSwitchCountdown;
    INT AIProfile[8];
    FLOAT AvgAITime;
    BITFIELD bCheckWalkSurfaces:1;
    class ASpawnNotify* SpawnNotify;
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=((bItems) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "ALevelInfo.h"
};

enum ELoginAction
{
    DO_Nothing              =0,
    DO_Log                  =1,
    DO_DisableLogin         =2,
    DO_KickPlayer           =3,
    DO_KickBanPlayer        =4,
    DO_MAX                  =5,
};

struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class UClass* SpawnClass;
    class APlayerPawn* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    INT ItemGoals;
    INT KillGoals;
    INT SecretGoals;
    BYTE Difficulty;
    BITFIELD bNoMonsters:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bMuteSpectators:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bCoopWeaponMode:1;
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bLowGore:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bVeryLowGore:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bExternalBatcher:1;
    FLOAT AutoAim;
    FLOAT GameSpeed;
    FLOAT StartTime;
    class UClass* DefaultPlayerClass;
    class UClass* DefaultWeapon;
    INT MaxSpectators;
    INT NumSpectators;
    FStringNoInit AdminPassword;
    FStringNoInit GamePassword;
    class UClass* ScoreBoardType;
    class UClass* GameMenuType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    class UClass* HUDType;
    class UClass* MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit SpecialDamageString;
    FStringNoInit SwitchLevelMessage;
    INT SentText;
    FStringNoInit DefaultPlayerName;
    FStringNoInit LeftMessage;
    FStringNoInit FailedSpawnMessage;
    FStringNoInit FailedPlaceMessage;
    FStringNoInit FailedTeamMessage;
    FStringNoInit NameChangedMessage;
    FStringNoInit EnteredMessage;
    FStringNoInit GameName;
    FStringNoInit MaxedOutMessage;
    FStringNoInit WrongPassword;
    FStringNoInit NeedPassword;
    FStringNoInit IPBanned;
    INT MaxPlayers;
    INT NumPlayers;
    INT CurrentID;
    class UClass* DeathMessageClass;
    class UClass* DMMessageClass;
    class UClass* MutatorClass;
    class AMutator* BaseMutator;
    class AMutator* DamageMutator;
    class AMutator* MessageMutator;
    class UClass* WaterZoneType;
    FName DefaultPlayerState;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ServerLogName;
    class AStatLog* LocalLog;
    class AStatLog* WorldLog;
    BITFIELD bLocalLog:1;
    BITFIELD bWorldLog:1;
    BITFIELD bBatchLocal:1;
    BITFIELD bLoggingGame:1;
    FStringNoInit LocalLogFileName;
    FStringNoInit WorldLogFileName;
    class UClass* StatLogClass;
    INT DemoBuild;
    INT DemoHasTuts;
    FStringNoInit EnabledMutators;
    FLOAT PlayerViewDelay;
    FLOAT PlayerSpeechDelay;
    FLOAT PlayerTauntDelay;
    FLOAT MinFOV;
    FLOAT MaxFOV;
    INT MaxNameChanges;
    INT NoLockdown;
    BITFIELD bFixMultiWeaponBug:1;
    BITFIELD bFixFeignDeathZoomBug:1;
    BITFIELD bLogAdminActions:1;
    FLOAT LoginDelaySeconds;
    INT MaxLoginAttempts;
    BYTE ActionToTake;
    FStringNoInit IPPolicies[255];
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerPawn* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerPawn* eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        Parms.SpawnClass=SpawnClass;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


struct AMutator_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class AMutator* NextDamageMutator;
    class AMutator* NextMessageMutator;
    class AMutator* NextHUDMutator;
    BITFIELD bHUDMutator:1;
    BITFIELD bAddToPackageMap:1;
    class UClass* DefaultWeapon;
    void eventPostRender(class UCanvas* Canvas)
    {
        AMutator_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    #include "AMutator.h"
};


class ENGINE_API ADecoration : public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1;
    BITFIELD bOnlyTriggerable:1;
    BITFIELD bSplash:1;
    BITFIELD bBobbing:1;
    BITFIELD bWasCarried:1;
    class USound* PushSound;
    INT numLandings;
    class UClass* contents;
    class UClass* content2;
    class UClass* content3;
    class USound* EndPushSound;
    BITFIELD bPushSoundPlaying:1;
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};


class ENGINE_API ACarcass : public ADecoration
{
public:
    BITFIELD bPlayerCarcass:1 GCC_PACK(INT_ALIGNMENT);
    BYTE flies GCC_PACK(INT_ALIGNMENT);
    BYTE rats;
    BITFIELD bReducedHeight:1 GCC_PACK(INT_ALIGNMENT);
    BITFIELD bDecorative:1;
    BITFIELD bSlidingCarcass:1;
    INT CumulativeDamage;
    class APlayerReplicationInfo* PlayerOwner;
    class APawn* Bugs;
    DECLARE_CLASS(ACarcass,ADecoration,0,Engine)
    #include "ACarcass.h"
};


class ENGINE_API AMenu : public AActor
{
public:
    class AMenu* ParentMenu;
    INT Selection;
    INT MenuLength;
    BITFIELD bConfigChanged:1;
    BITFIELD bExitAllMenus:1;
    class APlayerPawn* PlayerOwner;
    FStringNoInit HelpMessage[24];
    FStringNoInit MenuList[24];
    FStringNoInit LeftString;
    FStringNoInit RightString;
    FStringNoInit CenterString;
    FStringNoInit EnabledString;
    FStringNoInit DisabledString;
    FStringNoInit MenuTitle;
    FStringNoInit YesString;
    FStringNoInit NoString;
    DECLARE_CLASS(AMenu,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMenu)
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AHUD : public AActor
{
public:
    INT HudMode;
    INT Crosshair;
    class UClass* MainMenuType;
    FStringNoInit HUDConfigWindowType;
    FColor WhiteColor;
    class AMenu* MainMenu;
    class AMutator* HUDMutator;
    class APlayerPawn* PlayerOwner;
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        AHUD_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    DECLARE_CLASS(AHUD,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_MAX                  =5,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType GCC_PACK(INT_ALIGNMENT);
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType;
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT speed;
    FLOAT MaxSpeed;
    FLOAT Damage;
    INT MomentumTransfer;
    FName MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class USound* MiscSound;
    FLOAT ExploWallOut;
    class UClass* ExplosionDecal;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API ALight : public AActor
{
public:
    DECLARE_CLASS(ALight,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    #include "ULevelSummary.h"
};

#endif

AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APawn,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APawn,-1,execCheckValidSkinPackage);
AUTOGENERATE_FUNCTION(APawn,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(APawn,531,execPickTarget);
AUTOGENERATE_FUNCTION(APawn,530,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,529,execAddPawn);
AUTOGENERATE_FUNCTION(APawn,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(APawn,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(APawn,520,execactorReachable);
AUTOGENERATE_FUNCTION(APawn,521,execpointReachable);
AUTOGENERATE_FUNCTION(APawn,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(APawn,522,execClearPaths);
AUTOGENERATE_FUNCTION(APawn,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(APawn,517,execFindPathToward);
AUTOGENERATE_FUNCTION(APawn,518,execFindPathTo);
AUTOGENERATE_FUNCTION(APawn,533,execCanSee);
AUTOGENERATE_FUNCTION(APawn,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,510,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,508,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,506,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,504,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,502,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,500,execMoveTo);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,1719,execIsInPackageMap);
AUTOGENERATE_FUNCTION(AActor,1718,execAddToPackageMap);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,293,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(ANavigationPoint,519,execdescribeSpec);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Player)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Password)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DodgeClickTimer)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DodgeClickTime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Bob)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LandBob)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,AppliedBob)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,bobtime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ShowFlags)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,RendMap)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Misc1)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Misc2)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ViewTarget)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,FlashScale)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,FlashFog)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,myHUD)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Scoring)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,HUDType)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ScoringType)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DesiredFlashScale)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ConstantGlowScale)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,InstantFlash)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DesiredFlashFog)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ConstantGlowFog)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,InstantFog)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DesiredFOV)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DefaultFOV)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Song)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,SongSection)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,CdTrack)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Transition)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,shaketimer)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,shakemag)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,shakevert)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,maxshake)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,verttimer)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,CarcassType)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MyAutoAim)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,Handedness)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,JumpSound)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ZoomLevel)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,SpecialMenu)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DelayedCommand)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MouseSensitivity)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,WeaponPriority)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,SmoothMouseX)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,SmoothMouseY)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,BorrowedMouseX)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,BorrowedMouseY)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MouseSmoothThreshold)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MouseZeroTime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aBaseX)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aBaseY)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aBaseZ)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aMouseX)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aMouseY)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aForward)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aTurn)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aStrafe)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aUp)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aLookUp)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aExtra4)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aExtra3)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aExtra2)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aExtra1)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,aExtra0)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,SavedMoves)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,FreeMoves)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,PendingMove)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,CurrentTimeStamp)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ServerTimeStamp)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,TimeMargin)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ClientUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MaxTimeMargin)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ProgressMessage)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ProgressColor)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ProgressTimeOut)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,QuickSaveString)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,NoPauseMessage)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ViewingFrom)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,OwnCamera)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,FailedView)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,GameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ngWorldSecret)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,TargetViewRotation)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,TargetEyeHeight)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,TargetWeaponViewOffset)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DemoViewPitch)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,DemoViewYaw)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastPlaySound)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastMessageWindow)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LoginAttempts)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,NextLoginTime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ViewDelay)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,TauntDelay)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,SpeechDelay)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastView)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastTaunt)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastSpeech)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MinFOV)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MaxFOV)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,MaxNameChanges)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,NameChanges)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ServerMovementVersion)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,ClientMovementVersion)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,AccumulatedHTurn)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,AccumulatedVTurn)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,PreAdjustLocation)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,AdjustLocationOffset)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,AdjustLocationAlpha)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastClientTimestamp)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerPawn,LastClientLocation)
VERIFY_CLASS_SIZE_NODIE(APlayerPawn)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SightCounter)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,PainTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SpeechTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,AvgPhysicsTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,FootRegion)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,HeadRegion)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MoveTimer)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MoveTarget)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,FaceTarget)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Destination)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Focus)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,DesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MaxDesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MeleeRange)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,GroundSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,WaterSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,AirSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,AccelRate)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,JumpZ)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MaxStepHeight)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,AirControl)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MinHitWall)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Visibility)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Alertness)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Stimulus)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SightRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,PeripheralVision)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,HearingThreshold)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,LastSeenPos)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,LastSeeingPos)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,LastSeenTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Enemy)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Weapon)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,PendingWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SelectedItem)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,ViewRotation)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,WalkBob)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,BaseEyeHeight)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,EyeHeight)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Floor)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SplashTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,OrthoZoom)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,FovAngle)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,DieCount)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,ItemCount)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,KillCount)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SecretCount)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Spree)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Health)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SelectionMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SpecialMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,ReducedDamageType)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,ReducedDamagePct)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,DropWhenKilled)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,UnderWaterTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,AttitudeToPlayer)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Intelligence)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Skill)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SpecialGoal)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SpecialPause)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise1spot)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise1time)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise1other)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise1loudness)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise2spot)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise2time)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise2other)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,noise2loudness)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,LastPainSound)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,nextPawn)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,HitSound1)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,HitSound2)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Land)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Die)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,WaterStep)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bZoom)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bRun)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bLook)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bDuck)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bSnapLevel)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bStrafe)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bFire)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bAltFire)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bFreeLook)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bExtra0)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bExtra1)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bExtra2)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,bExtra3)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,CombatStyle)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,home)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,NextState)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,NextLabel)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SoundDampening)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,DamageScaling)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,AlarmTag)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,SharedAlarmTag)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,carriedDecoration)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,PlayerReStartState)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,MenuName)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,NameArticle)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,VoicePitch)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,VoiceType)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,OldMessageTime)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,RouteCache)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,PlayerReplicationInfoClass)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,PlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,Pawn,Shadow)
VERIFY_CLASS_SIZE_NODIE(APawn)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Physics)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Role)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,RemoteRole)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,NetTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Owner)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,InitialState)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Group)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,TimerRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,TimerCounter)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LifeSpan)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AnimSequence)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AnimFrame)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AnimRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,TweenRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SkelAnim)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LODBias)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Level)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,XLevel)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Tag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Event)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Target)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Instigator)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AmbientSound)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Inventory)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Base)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Region)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AttachTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,StandingCount)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,MiscNumber)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LatentByte)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,TransientSoundPriority)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LatentInt)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LatentFloat)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LatentActor)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Touching)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Unused)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Deleted)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,CollisionTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightingTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,OtherTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,ExtraTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SpecialTag)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Location)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Rotation)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,OldLocation)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,ColLocation)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Velocity)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Acceleration)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,OddsOfAppearing)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,HitActor)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,DrawType)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Style)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Sprite)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Texture)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Skin)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Mesh)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Brush)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,DrawScale)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,PrePivot)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,ScaleGlow)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,VisibilityRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,VisibilityHeight)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AmbientGlow)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Fatness)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SpriteProjForward)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,MultiSkins)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SoundRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SoundVolume)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SoundPitch)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SoundPriority)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,TransientSoundVolume)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,TransientSoundRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,CollisionRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,CollisionHeight)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightType)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightEffect)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightBrightness)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightHue)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightSaturation)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightPeriod)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightPhase)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,LightCone)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,VolumeBrightness)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,VolumeRadius)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,VolumeFog)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,DodgeDir)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Mass)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,Buoyancy)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,RotationRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,DesiredRotation)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,PhysAlpha)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,PhysRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,PendingTouch)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AnimLast)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,AnimMinRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,OldAnimRate)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,SimAnim)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,NetPriority)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,NetUpdateFrequency)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,RenderIteratorClass)
VERIFY_CLASS_OFFSET_NODIE(A,Actor,RenderInterface)
VERIFY_CLASS_SIZE_NODIE(AActor)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,ownerTeam)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,upstreamPaths)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,Paths)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,PrunedPaths)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,VisNoReachPaths)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,visitedWeight)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,RouteCache)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,bestPathWeight)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,nextNavigationPoint)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,nextOrdered)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,prevOrdered)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,startPath)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,previousPath)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,cost)
VERIFY_CLASS_OFFSET_NODIE(A,NavigationPoint,ExtraCost)
VERIFY_CLASS_SIZE_NODIE(ANavigationPoint)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,MoverEncroachType)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,MoverGlideType)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,BumpType)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,KeyNum)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,PrevKeyNum)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,NumKeys)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,WorldRaytraceKey)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,BrushRaytraceKey)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,MoveTime)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,StayOpenTime)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,OtherTime)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,EncroachDamage)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,PlayerBumpEvent)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,BumpEvent)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SavedTrigger)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,DamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,numTriggerEvents)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,Leader)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,Follower)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,ReturnGroup)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,DelayTime)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,OpeningSound)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,OpenedSound)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,ClosingSound)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,ClosedSound)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,MoveAmbientSound)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,KeyPos)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,KeyRot)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,BasePos)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,OldPos)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,OldPrePivot)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SavedPos)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,BaseRot)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,oldRot)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SavedRot)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,myMarker)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,WaitingPawn)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,RecommendedTrigger)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SimOldPos)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SimOldRotPitch)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SimOldRotYaw)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SimOldRotRoll)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,SimInterpolate)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,RealPosition)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,RealRotation)
VERIFY_CLASS_OFFSET_NODIE(A,Mover,ClientUpdate)
VERIFY_CLASS_SIZE_NODIE(AMover)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,CsgOper)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,UnusedLightMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,PostPivot)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,MainScale)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,PostScale)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,TempScale)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,BrushColor)
VERIFY_CLASS_OFFSET_NODIE(A,Brush,PolyFlags)
VERIFY_CLASS_SIZE_NODIE(ABrush)
VERIFY_CLASS_OFFSET_NODIE(A,Pickup,Inv)
VERIFY_CLASS_OFFSET_NODIE(A,Pickup,NumCopies)
VERIFY_CLASS_OFFSET_NODIE(A,Pickup,ExpireMessage)
VERIFY_CLASS_SIZE_NODIE(APickup)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,AutoSwitchPriority)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,InventoryGroup)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PickupMessage)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ItemName)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ItemArticle)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,RespawnTime)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PlayerLastTouched)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PlayerViewOffset)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PlayerViewMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PlayerViewScale)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,BobDamping)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PickupViewMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PickupViewScale)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ThirdPersonMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ThirdPersonScale)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,StatusIcon)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ProtectionType1)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ProtectionType2)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,Charge)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ArmorAbsorption)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,AbsorptionPriority)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,NextArmor)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,MaxDesireability)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,myMarker)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,FlashCount)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,OldFlashCount)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,MuzzleFlashStyle)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,MuzzleFlashMesh)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,MuzzleFlashScale)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,MuzzleFlashTexture)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PickupSound)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ActivateSound)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,DeActivateSound)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,RespawnSound)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,Icon)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,M_Activated)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,M_Selected)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,M_Deactivated)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,PickupMessageClass)
VERIFY_CLASS_OFFSET_NODIE(A,Inventory,ItemMessageClass)
VERIFY_CLASS_SIZE_NODIE(AInventory)
VERIFY_CLASS_OFFSET_NODIE(A,Ammo,AmmoAmount)
VERIFY_CLASS_OFFSET_NODIE(A,Ammo,MaxAmmo)
VERIFY_CLASS_OFFSET_NODIE(A,Ammo,ParentAmmo)
VERIFY_CLASS_OFFSET_NODIE(A,Ammo,UsedInWeaponSlot)
VERIFY_CLASS_OFFSET_NODIE(A,Ammo,PAmmo)
VERIFY_CLASS_SIZE_NODIE(AAmmo)
VERIFY_CLASS_OFFSET_NODIE(A,SpawnNotify,ActorClass)
VERIFY_CLASS_OFFSET_NODIE(A,SpawnNotify,Next)
VERIFY_CLASS_SIZE_NODIE(ASpawnNotify)
VERIFY_CLASS_OFFSET_NODIE(A,Decal,MultiDecalLevel)
VERIFY_CLASS_OFFSET_NODIE(A,Decal,LastRenderedTime)
VERIFY_CLASS_OFFSET_NODIE(A,Decal,SurfList)
VERIFY_CLASS_SIZE_NODIE(ADecal)
VERIFY_CLASS_OFFSET_NODIE(A,locationid,LocationName)
VERIFY_CLASS_OFFSET_NODIE(A,locationid,Radius)
VERIFY_CLASS_OFFSET_NODIE(A,locationid,NextLocation)
VERIFY_CLASS_SIZE_NODIE(Alocationid)
VERIFY_CLASS_SIZE_NODIE(AKeypoint)
VERIFY_CLASS_OFFSET_NODIE(U,LevelSummary,Title)
VERIFY_CLASS_OFFSET_NODIE(U,LevelSummary,Author)
VERIFY_CLASS_OFFSET_NODIE(U,LevelSummary,IdealPlayerCount)
VERIFY_CLASS_OFFSET_NODIE(U,LevelSummary,RecommendedEnemies)
VERIFY_CLASS_OFFSET_NODIE(U,LevelSummary,RecommendedTeammates)
VERIFY_CLASS_OFFSET_NODIE(U,LevelSummary,LevelEnterText)
VERIFY_CLASS_SIZE_NODIE(ULevelSummary)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,GameName)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,GameClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,RemainingTime)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,ElapsedTime)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,RemainingMinute)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,SecondCount)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,NumPlayers)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,SumFrags)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,UpdateTimer)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,ServerName)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,ShortName)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,AdminName)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,AdminEmail)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,Region)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,MOTDLine1)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,MOTDLine2)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,MOTDLine3)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,MOTDLine4)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,GameEndedComments)
VERIFY_CLASS_OFFSET_NODIE(A,GameReplicationInfo,PRIArray)
VERIFY_CLASS_SIZE_NODIE(AGameReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AInfo)
VERIFY_CLASS_OFFSET_NODIE(A,StatLogFile,Encoding)
VERIFY_CLASS_OFFSET_NODIE(A,StatLogFile,LogAr)
VERIFY_CLASS_OFFSET_NODIE(A,StatLogFile,StatLogFile)
VERIFY_CLASS_OFFSET_NODIE(A,StatLogFile,StatLogFinal)
VERIFY_CLASS_SIZE_NODIE(AStatLogFile)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,Context)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,TimeStamp)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LocalStandard)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,WorldStandard)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LogVersion)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LogInfoURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,GameName)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,GameCreator)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,GameCreatorURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,DecoderRingURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LocalBatcherURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LocalBatcherParams)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LocalStatsURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,WorldBatcherURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,WorldBatcherParams)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,WorldStatsURL)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,LocalLogDir)
VERIFY_CLASS_OFFSET_NODIE(A,StatLog,WorldLogDir)
VERIFY_CLASS_SIZE_NODIE(AStatLog)
VERIFY_CLASS_SIZE_NODIE(AInternetInfo)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,PlayerName)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,OldName)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,PlayerID)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,TeamName)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,Team)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,TeamID)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,Score)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,Deaths)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,VoiceType)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,HasFlag)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,Ping)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,PacketLoss)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,TalkTexture)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,PlayerZone)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,PlayerLocation)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,StartTime)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerReplicationInfo,TimeAcc)
VERIFY_CLASS_SIZE_NODIE(APlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,LiftExit,LiftTag)
VERIFY_CLASS_OFFSET_NODIE(A,LiftExit,MyLift)
VERIFY_CLASS_OFFSET_NODIE(A,LiftExit,LiftTrigger)
VERIFY_CLASS_OFFSET_NODIE(A,LiftExit,RecommendedTrigger)
VERIFY_CLASS_OFFSET_NODIE(A,LiftExit,LastTriggerTime)
VERIFY_CLASS_SIZE_NODIE(ALiftExit)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,LiftTag)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,MyLift)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,LiftTrigger)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,RecommendedTrigger)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,LastTriggerTime)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,MaxZDiffAdd)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,MaxDist2D)
VERIFY_CLASS_OFFSET_NODIE(A,LiftCenter,LiftOffset)
VERIFY_CLASS_SIZE_NODIE(ALiftCenter)
VERIFY_CLASS_OFFSET_NODIE(A,Carcass,flies)
VERIFY_CLASS_OFFSET_NODIE(A,Carcass,rats)
VERIFY_CLASS_OFFSET_NODIE(A,Carcass,CumulativeDamage)
VERIFY_CLASS_OFFSET_NODIE(A,Carcass,PlayerOwner)
VERIFY_CLASS_OFFSET_NODIE(A,Carcass,Bugs)
VERIFY_CLASS_SIZE_NODIE(ACarcass)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,EffectWhenDestroyed)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,PushSound)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,numLandings)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,contents)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,content2)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,content3)
VERIFY_CLASS_OFFSET_NODIE(A,Decoration,EndPushSound)
VERIFY_CLASS_SIZE_NODIE(ADecoration)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,NextMove)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,TimeStamp)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,Delta)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,MergeCount)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,DodgeMove)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,SavedLocation)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,SavedVelocity)
VERIFY_CLASS_OFFSET_NODIE(A,SavedMove,SavedViewRotation)
VERIFY_CLASS_SIZE_NODIE(ASavedMove)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,ParentMenu)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,Selection)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,MenuLength)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,PlayerOwner)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,HelpMessage)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,MenuList)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,LeftString)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,RightString)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,CenterString)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,EnabledString)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,DisabledString)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,MenuTitle)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,YesString)
VERIFY_CLASS_OFFSET_NODIE(A,Menu,NoString)
VERIFY_CLASS_SIZE_NODIE(AMenu)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,HudMode)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,Crosshair)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,MainMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,HUDConfigWindowType)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,WhiteColor)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,MainMenu)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,HUDMutator)
VERIFY_CLASS_OFFSET_NODIE(A,HUD,PlayerOwner)
VERIFY_CLASS_SIZE_NODIE(AHUD)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneMarker,markedWarpZone)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneMarker,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneMarker,TriggerActor2)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneMarker)
VERIFY_CLASS_SIZE_NODIE(AButtonMarker)
VERIFY_CLASS_SIZE_NODIE(ATriggerMarker)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,TriggerType)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,Message)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,ClassProximityType)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,RepeatTriggerTime)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,ReTriggerDelay)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,TriggerTime)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,DamageThreshold)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE(A,Trigger,TriggerActor2)
VERIFY_CLASS_SIZE_NODIE(ATrigger)
VERIFY_CLASS_SIZE_NODIE(ATriggers)
VERIFY_CLASS_OFFSET_NODIE(A,InventorySpot,markedItem)
VERIFY_CLASS_SIZE_NODIE(AInventorySpot)
VERIFY_CLASS_OFFSET_NODIE(A,PlayerStart,TeamNumber)
VERIFY_CLASS_SIZE_NODIE(APlayerStart)
VERIFY_CLASS_OFFSET_NODIE(A,Teleporter,URL)
VERIFY_CLASS_OFFSET_NODIE(A,Teleporter,ProductRequired)
VERIFY_CLASS_OFFSET_NODIE(A,Teleporter,TargetVelocity)
VERIFY_CLASS_OFFSET_NODIE(A,Teleporter,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE(A,Teleporter,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE(A,Teleporter,LastFired)
VERIFY_CLASS_SIZE_NODIE(ATeleporter)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,OtherSideURL)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,ThisTag)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,iWarpZone)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,WarpCoords)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,OtherSideActor)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,OtherSideLevel)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,Destinations)
VERIFY_CLASS_OFFSET_NODIE(A,WarpZoneInfo,numDestinations)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneInfo)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneTag)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneGravity)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneVelocity)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneGroundFriction)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneFluidFriction)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneTerminalVelocity)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZonePlayerEvent)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZonePlayerCount)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,NumCarcasses)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,DamagePerSec)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,DamageType)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,DamageString)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ZoneName)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,locationid)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,MaxCarcasses)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,EntrySound)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ExitSound)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,EntryActor)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ExitActor)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,SkyZone)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,AmbientBrightness)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,AmbientHue)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,AmbientSaturation)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,FogColor)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,FogDistance)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,EnvironmentMap)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,TexUPanSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,TexVPanSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ViewFlash)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,ViewFog)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,SpeedOfSound)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,MasterGain)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,CutoffHz)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,Delay)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,Gain)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,LensFlare)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,LensFlareOffset)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,LensFlareScale)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,MinLightCount)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,MaxLightCount)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,MinLightingPolyCount)
VERIFY_CLASS_OFFSET_NODIE(A,ZoneInfo,MaxLightingPolyCount)
VERIFY_CLASS_SIZE_NODIE(AZoneInfo)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,speed)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,MaxSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,Damage)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,MomentumTransfer)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,MyDamageType)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,SpawnSound)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,ImpactSound)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,MiscSound)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,ExploWallOut)
VERIFY_CLASS_OFFSET_NODIE(A,Projectile,ExplosionDecal)
VERIFY_CLASS_SIZE_NODIE(AProjectile)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,Position)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,RateModifier)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,GameSpeedModifier)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,FovModifier)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,ScreenFlashScale)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,ScreenFlashFog)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,Prev)
VERIFY_CLASS_OFFSET_NODIE(A,InterpolationPoint,Next)
VERIFY_CLASS_SIZE_NODIE(AInterpolationPoint)
VERIFY_CLASS_SIZE_NODIE(AScout)
VERIFY_CLASS_SIZE_NODIE(APathNode)
VERIFY_CLASS_SIZE_NODIE(ASkyZoneInfo)
VERIFY_CLASS_SIZE_NODIE(ACamera)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,ItemGoals)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,KillGoals)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,SecretGoals)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,Difficulty)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,AutoAim)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,StartTime)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DefaultPlayerClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DefaultWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MaxSpectators)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,NumSpectators)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,AdminPassword)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GamePassword)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,ScoreBoardType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,BotMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,RulesMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,SettingsMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameUMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MultiplayerUMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameOptionsMenuType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,HUDType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MapListType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MapPrefix)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,BeaconName)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,SpecialDamageString)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,SwitchLevelMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,SentText)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DefaultPlayerName)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,LeftMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,FailedSpawnMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,FailedPlaceMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,FailedTeamMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,NameChangedMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,EnteredMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameName)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MaxedOutMessage)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,WrongPassword)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,NeedPassword)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,IPBanned)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MaxPlayers)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,NumPlayers)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,CurrentID)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DeathMessageClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DMMessageClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MutatorClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,BaseMutator)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DamageMutator)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MessageMutator)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,WaterZoneType)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DefaultPlayerState)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameReplicationInfoClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,GameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,ServerLogName)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,LocalLog)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,WorldLog)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,LocalLogFileName)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,WorldLogFileName)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,StatLogClass)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DemoBuild)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,DemoHasTuts)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,EnabledMutators)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,PlayerViewDelay)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,PlayerSpeechDelay)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,PlayerTauntDelay)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MinFOV)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MaxFOV)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MaxNameChanges)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,NoLockdown)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,LoginDelaySeconds)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,MaxLoginAttempts)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,ActionToTake)
VERIFY_CLASS_OFFSET_NODIE(A,GameInfo,IPPolicies)
VERIFY_CLASS_SIZE_NODIE(AGameInfo)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,TimeDilation)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,TimeSeconds)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Year)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Month)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Day)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,DayOfWeek)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Hour)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Minute)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Second)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Millisecond)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Title)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Author)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,IdealPlayerCount)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,RecommendedEnemies)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,RecommendedTeammates)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,LevelEnterText)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,LocalizedPkg)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Pauser)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Summary)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,VisibleGroups)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Song)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,SongSection)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,CdTrack)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,PlayerDoppler)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Brightness)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Screenshot)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,DefaultTexture)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,HubStackLevel)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,LevelAction)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,NetMode)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,ComputerName)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,EngineVersion)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,MinNetVersion)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,ServerMoveVersion)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,EngineRevision)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,EngineArchitecture)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,DefaultGameType)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,Game)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,NavigationPointList)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,PawnList)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,NextURL)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,NextSwitchCountdown)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,AIProfile)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,AvgAITime)
VERIFY_CLASS_OFFSET_NODIE(A,LevelInfo,SpawnNotify)
VERIFY_CLASS_SIZE_NODIE(ALevelInfo)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,MaxTargetRange)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AmmoName)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,ReloadCount)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,PickupAmmoCount)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AmmoType)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FiringSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FireOffset)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,ProjectileClass)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AltProjectileClass)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,MyDamageType)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AltDamageType)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,ProjectileSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AltProjectileSpeed)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,aimerror)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,shakemag)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,shaketime)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,shakevert)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AIRating)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,RefireRate)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AltRefireRate)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FireSound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AltFireSound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,CockingSound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,SelectSound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,Misc1Sound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,Misc2Sound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,Misc3Sound)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,MessageNoAmmo)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,DeathMessage)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,NameColor)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,AdjustedAim)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,bMuzzleFlash)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlashTime)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,MuzzleScale)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlashY)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlashO)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlashC)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlashLength)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlashS)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,MFTexture)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,MuzzleFlare)
VERIFY_CLASS_OFFSET_NODIE(A,Weapon,FlareOffset)
VERIFY_CLASS_SIZE_NODIE(AWeapon)
VERIFY_CLASS_SIZE_NODIE(AClipMarker)
VERIFY_CLASS_SIZE_NODIE(ALight)
VERIFY_CLASS_OFFSET_NODIE(A,Mutator,NextMutator)
VERIFY_CLASS_OFFSET_NODIE(A,Mutator,NextDamageMutator)
VERIFY_CLASS_OFFSET_NODIE(A,Mutator,NextMessageMutator)
VERIFY_CLASS_OFFSET_NODIE(A,Mutator,NextHUDMutator)
VERIFY_CLASS_OFFSET_NODIE(A,Mutator,DefaultWeapon)
VERIFY_CLASS_SIZE_NODIE(AMutator)
#endif // VERIFY_CLASS_SIZES
